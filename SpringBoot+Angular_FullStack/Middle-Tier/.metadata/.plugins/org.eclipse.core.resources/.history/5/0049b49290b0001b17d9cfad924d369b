package com.sam.fullstack.controller;

import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.io.*;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.mysql.cj.xdevapi.JsonArray;
import com.sam.fullstack.exception.ResourceNotFoundException;
import com.sam.fullstack.model.Employee;
import com.sam.fullstack.repository.EmployeeRepository;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping ("/api/v1/")
public class EmployeeController {
	
	
	 String url = "https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict?district_id=449&date=";
	
	SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
	
	
	@Autowired
	private EmployeeRepository employeeRepository;
	
	//get all employess
	@GetMapping("/employees")
	public List<Employee> getAll() {
		return employeeRepository.findAll();
		
	}
	
	@GetMapping("/seat")
	public String get() {
		
		HttpHeaders headers = new HttpHeaders();

		headers.add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36");

		headers.setContentType(MediaType.APPLICATION_JSON);

		HttpEntity<String> entity = new HttpEntity<>( headers);
		
		 RestTemplate restTemplate = new RestTemplate();
		 ResponseEntity<String> result = null;
		
		Date dt = new Date();
		Calendar c = Calendar.getInstance(); 
		c.setTime(dt); 
		
		String s = null;
		
		for (int day=1;day <100;day++) {
			
			c.add(Calendar.DATE, day);


			String stdt = formatter.format( c.getTime()).replaceAll("/", "-");

			url = url+stdt;

			result = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
			
			

			try {

				
				Gson gson = new Gson();

				Root root = gson.fromJson(result.getBody(), Root.class);

				List<Centers> centerlist = root.getCenters();

				for (int i =0 ; i<centerlist.size();i++) {

					System.out.println(" centre lsit.."+centerlist.get(i).getName());

					//for (int j =0 ; j<centerlist.get(i).getSessions().size();j++) {

						/*if (centerlist.get(i).getSessions().get(j).getAvailable_capacity()>0) {

						System.out.println("vaccination centre found..." + centerlist.get(i));
					}*/
					
					for (Session sn : centerlist.get(i).getSessions()) 
					{ 
						//if(sn.getAvailable_capacity()>0) {
						/*System.out.println(" centre name.."+centerlist.get(i).getName());
						System.out.println("vaccination centre found..." + sn.getAvailable_capacity()+" ..Date..."+sn.getDate());*/
						//}
						s = s+ "vaccination centre found..." + sn.getAvailable_capacity()+System.lineSeparator();
						
					}

					
				
				
			}
	            
	            
	        } catch (Exception e) {
	            e.printStackTrace();}
			
			
			
			
			
			
		}
		
	    
	     return s ;
	}
	
	
	
	//Add employee
	@PostMapping("/employees")
	public Employee addEmplyoee(@RequestBody Employee employee) {
		
		return employeeRepository.save(employee);
	}
	
	//get emloyee by Id
	@GetMapping("/employees/{id}")
	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {
		
		Employee  employee = employeeRepository.findById(id).
				orElseThrow(() ->new ResourceNotFoundException("No Employee of this ID"));
		
		return ResponseEntity.ok(employee);
	}  
	
	
	//update employee - for that need to retrieve employe form DB
	@PutMapping("/employees/{id}")
	public ResponseEntity<Employee> updateEmployee (@PathVariable Long id , @RequestBody Employee employee){
		
		Employee  employeeRetrieved = employeeRepository.findById(id).
				orElseThrow(() ->new ResourceNotFoundException("No Employee of this ID"));
		
		employeeRetrieved.setFirstName(employee.getFirstName());
		employeeRetrieved.setLastName(employee.getLastName());
		employeeRetrieved.setEmailId(employee.getEmailId());
		employeeRetrieved.setId(employee.getId());
		
		Employee updatedEmployee=employeeRepository.save(employeeRetrieved);
		return ResponseEntity.ok(updatedEmployee);
	}

}
